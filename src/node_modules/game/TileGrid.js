const key = (x, y) => x + ',' + y;

export default class {
  constructor(rows = []) {
    this.map = Object.create(null);
    this.height = rows.length;
    this.width = 0;
    rows.forEach((row, y) => {
      for (let x = 0; x < row.length; x++) {
        this.width = Math.max(this.width, x);
        const tile = row[x];
        if (tile !== ' ') {
          this.set(x, y, tile);
        }
      }
    });
  }
  set(x, y, t) {
    const k = key(x, y);
    let entry = this.map[k];
    const old = entry && entry.tile;
    if (entry && typeof t === 'undefined') {
      delete this.map[k];
    } else {
      if (!entry) {
        entry = this.map[k] = {x, y};
      }
      entry.tile = t;
    }
    return old;
  }
  get(x, y, def) {
    const k = key(x, y);
    const entry = this.map[k];
    let result = entry && entry.tile;
    if (typeof result === 'undefined') {
      result = def;
    }
    return result;
  }
  has(x, y) {
    const k = key(x, y);
    return k in this.map;
  }
  forEach(f, thisArg) {
    for (const key in this.map) {
      const entry = this.map[key];
      f.call(thisArg, entry.tile, entry.x, entry.y, this);
    }
  }
}